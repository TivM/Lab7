package serverModule.collection;

import serverModule.log.Log;

import java.sql.*;
import java.util.Scanner;

public class DatabaseManager {
    public static final String WORKER_TABLE = "worker";
    public static final String USER_TABLE = "my_user";
    public static final String COORDINATES_TABLE = "coordinates";
    public static final String PERSON_TABLE = "person";

    public static final String WORKER_TABLE_ID_COLUMN = "id";
    public static final String WORKER_TABLE_NAME_COLUMN = "name";
    public static final String WORKER_TABLE_COORDINATES_ID_COLUMN = "coordinates_id";
    public static final String WORKER_TABLE_CREATION_DATE_COLUMN = "creation_date";
    public static final String WORKER_TABLE_SALARY_COLUMN = "salary";
    public static final String WORKER_TABLE_END_DATE_COLUMN = "end_date";
    public static final String WORKER_TABLE_POSITION_COLUMN = "position";
    public static final String WORKER_TABLE_STATUS_COLUMN = "status";
    public static final String WORKER_TABLE_PERSON_ID_COLUMN = "person_id";
    public static final String WORKER_TABLE_USER_ID_COLUMN = "user_id";

    public static final String USER_TABLE_ID_COLUMN = "id";
    public static final String USER_TABLE_USERNAME_COLUMN = "username";
    public static final String USER_TABLE_PASSWORD_COLUMN = "password";
    public static final String USER_TABLE_ONLINE_COLUMN = "online";

    public static final String PERSON_TABLE_ID_COLUMN = "id";
    public static final String PERSON_TABLE_BIRTHDAY_COLUMN = "birthday";
    public static final String PERSON_TABLE_WEIGHT_COLUMN = "weight";
    public static final String PERSON_TABLE_EYE_COLOR_COLUMN = "eye_color";

    public static final String COORDINATES_TABLE_ID_COLUMN = "id";
    public static final String COORDINATES_TABLE_X_COLUMN = "x";
    public static final String COORDINATES_TABLE_Y_COLUMN = "y";

    private final String JDBC_DRIVER = "org.postgresql.Driver";

    private final String url = "jdbc:postgresql://localhost:20000/studs";
    private String user;
    private String password;
    private Connection connection;

    public DatabaseManager() {
        connectToDB();
    }

    private void connectToDB() {
        Scanner scanner = new Scanner(System.in);
        Log.logger.trace("Trying to connect to database...");
        while (true) {
            System.out.println("enter username: ");
            user = scanner.nextLine();
            System.out.println("enter password: ");
            password = scanner.nextLine();
            try {
                Class.forName(JDBC_DRIVER);
                connection = DriverManager.getConnection(url, user, password);
                Log.logger.trace("The connection to the database is established");
                break;
            } catch (ClassNotFoundException e) {
                Log.logger.trace("Database management driver not found");
                System.exit(0);
            } catch (SQLException exception) {
                Log.logger.trace("An error occurred while connecting to the database\n" +
                        "Check that the login and password are entered correctly");
            }
        }
    }

    public PreparedStatement doPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            return preparedStatement;
        } catch (SQLException e) {
            if (connection == null) {
                Log.logger.trace("Connection to the database is not established");
            }
            throw new SQLException();
        }
    }

    public void closePreparedStatement(PreparedStatement preparedStatement) {
        if (preparedStatement == null) return;
        try {
            preparedStatement.close();
        } catch (SQLException e) {
            Log.logger.trace("Failed to close SQL query");
        }
    }

    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            Log.logger.trace("The connection to the database is broken");
        } catch (SQLException e) {
            Log.logger.trace("An error occurred when the connection to the database was severed");
        }
    }

    public void setCommit() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException e) {
            Log.logger.trace("An error occurred while setting 'commit'");
        }
    }

    public void setAutoCommit() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException e) {
            Log.logger.trace("An error occurred while installing 'auto_commit'");
        }
    }

    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException e) {
            Log.logger.trace("An error occurred while confirming the new state of the database");
        }
    }

    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException e) {
            Log.logger.trace("An error occurred when returning the original state of the database");
        }
    }

    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException e) {
            Log.logger.trace("An error occurred while saving the state of the database");
        }
    }
}
